/*
 * Copyright 2010 OpenHealthData, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.

 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 #created on: Apr 29, 2008
package org.astm.ccr.rules.core

#list any import classes here.
import java.util.List;
import org.astm.ccr.ProcedureType;
import org.astm.ccr.DateTimeType;
import org.astm.ccr.InternalCCRLink;
import org.astm.ccr.FrequencyType;
import org.astm.ccr.IntervalType;
import org.astm.ccr.DurationType;
import org.astm.ccr.MethodType;
import org.astm.ccr.PositionType;
import org.astm.ccr.IDType;
import org.astm.ccr.SourceType;
import org.astm.ccr.Indications;
import org.astm.ccr.SiteType;

#declare any global variables here



rule "ccr ProcedureType - datetime"
	when
		$p:ProcedureType($d:dateTime)
		List(this == $d, size >0)
	then
		for (DateTimeType d : $p.getDateTime()){
			insert(d);
		}
end

rule "ccr ProcedureType - ids"
	when
		ProcedureType($i:IDs != null)
	then
		insert($i);
end

rule "ccr ProcedureType - type"
	when
		ProcedureType ($t:type != null)
	then
		insert($t);
end

rule "ccr ProcedureType - description"
	when
		ProcedureType ($d: description != null)
	then
		insert($d);
end

rule "ccr ProcedureType - status"
	when
		ProcedureType ($s:status != null)
	then
		insert($s);
end

rule "ccr ProcedureType - source"
	when
		$p:ProcedureType ($s:source)
		List(this == $s, size >0)
	then
		for(SourceType s : $p.getSource()){
			insert(s);
		}
end

rule "ccr ProcedureType - internalccrlink"
	when
		$p:ProcedureType ($i:internalCCRLink)
		List(this == $i, size >0)
	then
		for(InternalCCRLink i : $p.getInternalCCRLink()){
			insert(i);
		}
end

rule "ccr ProcedureType - locations"
	when
		ProcedureType ($l: locations != null)
	then
		insert($l);
end

rule "ccr ProcedureType - practitioners"
	when
		ProcedureType ($p: practitioners != null)
	then
		insert($p);
end

rule "ccr ProcedureType - frequency"
	when
		$p:ProcedureType ($f:frequency)
		List(this == $f, size >0)
	then
		for(FrequencyType f : $p.getFrequency()){
			insert(f);
		}
end

rule "ccr ProcedureType - interval"
	when
		$p:ProcedureType ($i:interval)
		List(this == $i, size >0)
	then
		for(IntervalType i : $p.getInterval()){
			insert(i);
		}
end

rule "ccr ProcedureType - duration"
	when
		$p:ProcedureType ()
	then
		for(DurationType d : $p.getDuration()){
			insert(d);
		}
end

rule "ccr ProcedureType - indications"
	when
		$p:ProcedureType ($i:indications)
		List(this == $i, size >0)
	then
		for(Indications i : $p.getIndications()){
			insert(i);
		}
end

rule "ccr ProcedureType - instructions"
	when
		ProcedureType ($i:instructions != null)
	then
		insert($i);
end

rule "ccr ProcedureType - consent"
	when
		ProcedureType ($c:consent != null)
	then
		insert($c);
end

rule "ccr ProcedureType - products"
	when
		ProcedureType ($p: products != null)
	then
		insert($p);
end

rule "ccr ProcedureType - substance"
	when
		ProcedureType ($s:substance != null)
	then
		insert($s);
end

rule "ccr ProcedureType - method"
	when
		$p:ProcedureType ($m:method)
		List(this == $m, size >0)
	then
		for (MethodType m : $p.getMethod()){
			insert(m);
		}
end

rule "ccr ProcedureType - position"
	when
		$p: ProcedureType ($ps:position)
		List(this == $ps, size >0)
	then
		for (PositionType p : $p.getPosition()){
			insert(p);
		}
end

rule "ccr ProcedureType - site"
	when
		$p: ProcedureType ($s: site)
		List(this == $s, size >0)
	then
		for (SiteType s :  $p.getSite()){
			insert(s);
		}
end