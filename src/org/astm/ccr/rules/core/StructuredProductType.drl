/*
 * Copyright 2010 OpenHealthData, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.

 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 #created on: Apr 29, 2008
package org.astm.ccr.rules.core

#list any import classes here.
import java.util.List;
import org.astm.ccr.StructuredProductType;
import org.astm.ccr.Directions;
import org.astm.ccr.OrderRxHistoryType;
import org.astm.ccr.InstructionType;
import org.astm.ccr.QuantityType;
import org.astm.ccr.Reaction;
import org.astm.ccr.DateTimeType;
import org.astm.ccr.CommentType;

#declare any global variables here




rule "ccr StructuredProductType - consent"
	
	when
		$s : StructuredProductType ($c: consent != null)
	then 
		insert($c);
end

rule "ccr StructuredProductType - directions"
	when
		$s: StructuredProductType($d:directions)
		List(this == $d, size >0)
	then
		for (Directions d : $s.getDirections()){
			insert(d);
		}
end

rule "ccr StructuredProductType - fulfillmenthistory"
	when
		$s: StructuredProductType(fulfillmentHistory != null)
	then
		for (OrderRxHistoryType o : $s.getFulfillmentHistory().getFulfillment()){
			insert(o);
		}
end

rule "ccr StructuredProductType - fulfillmentinstructions"
	when
		$s: StructuredProductType( fulfillmentInstructions  != null)
	then
		for (InstructionType i : $s.getFulfillmentInstructions().getInstruction()){
			insert(i);
		}
end

rule "ccr StructuredProductType - patientinstructions"
	when
		$s: StructuredProductType( patientInstructions != null )
	then
		for (InstructionType i : $s.getPatientInstructions().getInstruction()){
			insert(i);
		}
end

rule "ccr StructuredProductType - Product"
	when
		$s: StructuredProductType($p:product)
		List(this == $p, size >0)
	then
		for(StructuredProductType.Product p : $s.getProduct()){
			if(p.getProductName() != null){
				insert(p.getProductName());
			}
			if(p.getBrandName() != null){
				insert(p.getBrandName());
			}
			if(p.getManufacturer() != null){
				insert(p.getManufacturer());
			}
			if(p.getMultipleProductModifier() != null){
				insert(p.getMultipleProductModifier());
			}
			for(StructuredProductType.Product.Strength s : p.getStrength()){
				insert(s);
				if (s.getVariableStrengthModifier() != null){
					insert(s.getVariableStrengthModifier());
				}
			}
			for(StructuredProductType.Product.Size s : p.getSize()){
				insert(s);
				for (StructuredProductType.Product.Size.Dimensions.Dimension d : s.getDimensions().getDimension()){
					insert(d);
					if (d.getDescription() != null){
						insert(d.getDescription());
					}
				}
			}
			for (StructuredProductType.Product.Form f : p.getForm()){
				insert(f);
				if (f.getMultipleFormModifier() != null){
					insert(f.getMultipleFormModifier());
				}
			}
			for (StructuredProductType.Product.Concentration c : p.getConcentration()){
				insert(c);
				if (c.getVariableConcentrationModifier() != null){
					insert(c.getVariableConcentrationModifier());
				}
			}
		}
end

rule "ccr StructuredProductType - quantity"
	when
		$s: StructuredProductType($q:quantity)
		List(this == $q, size >0)
	then
		for (QuantityType q : $s.getQuantity()){
			insert(q);
		}
end

rule "ccr StructuredProductType - reaction"
	when
		StructuredProductType($r:reaction != null)
	then
		insert($r);
end

rule "ccr StructuredProductType - refills"
	when
		$s: StructuredProductType(refills != null)
	then
		for(StructuredProductType.Refills.Refill r : $s.getRefills().getRefill()){
			for (QuantityType qt: r.getQuantity()){
				insert(qt);
			}
			if (r.getStatus() != null){
				insert(r.getStatus());
			}
			for(DateTimeType dt : r.getDateTime()){
				insert(dt);
			}
			for(CommentType ct : r.getComment()){
				insert(ct);
			}
		}
end